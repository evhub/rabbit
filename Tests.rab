# Assertion Tests:
x = "don't touch me"
passert(statement) = ( assert:code(statement) ;; str(statement) )
assert:: (passert::"abc")
assert:: iserr((:(passert::0)):1)

# Includes:
passert:: include(math, stats)

# Boolean Operator Tests:
passert:: 1 ?= 1
passert:: ? 1 ?= 1
passert:: ! 1 ?= 2
passert:: 1 >=< 2
passert:: 1 < 2 <= 2
passert:: 2 !< 1
passert:: 1 ≠ 2
passert:: (?5) ?= 1
passert:: (!5) ?= 0
passert:: 1 & 2 > 1
passert:: 1 <= 0 | 1
passert:: 1 @ 2 > 1
passert:: 0 @ 4 ! 4; 1

# Math Tests:
passert:: 1+1 ?= 2
passert:: 3-5 ?= -2
passert:: 2*3 ?= 6
passert:: 1/2 ?= 0.5
passert:: 3^2 ?= 9
passert:: 8%3 ?= 2
passert:: 1+2-3 ?= 0
passert:: 3*4/5 ?= 2.4

# Matrix Tests:
passert:: 1,2,3 ?= (1,2,3)
passert:: (1,2,3)*2 ?= 2,4,6
passert:: (1,2,3)+10 ?= 11,12,13
passert:: (1,2)+(10,20) ?= 11,22
passert:: (1,2)*(10,20) ?= 10,40
passert:: [1,2]*[10,20] ?= 50
passert:: [1,0,0]%[0,1,0] ?= [0,0,1]
passert:: [1,2] ++ [3,4] ?= [1,2,3,4]
passert:: [2] ?= [1,2] -- 1
passert:: (1,2) ** 2 ?= 1,2,1,2
passert:: (1,2,3):2 ?= 3
passert:: [1,2,3,4]:1 ?= 2
passert:: (1,2,3):0:2 ?= 1,2

# Variable Setting Tests:
passert:: x ?= 1        $ x = 1
passert:: x ?= 1        $ x := 1
passert:: 2(x) ?= 2     $ x = 1
passert:: 2x ?= 2       $ x = 1

# Function Tests:
passert:: t()+1 ?= (t:)+1 ?= 2                 $ t() = 1
passert:: f(2,)*3 ?= f:2*3 ?= f(2)*3 ?= 9      $ f(x) = x+1
passert:: g(2,3)-5 ?= g:2:3-5 ?= 7             $ g(x,y) = 2*x*y
passert:: add(a) ?= 6                          $ a = 1,2,3 $ add(x,y,z) = x+y+z
passert:: plusone(1,2,3) ?= 2,3,4              $ plusone(l) = l+1
passert:: \1 ?= one                            $ one() = 1
passert:: (\x\x+1):5 ?= (\x\(x+1)):5 ?= 6
passert:: (\(x,y)\(x+y))(1,2) ?= 3
passert:: (\(-x:1)\x): ?= 1
passert:: gen_func:2:5 ?= 1                    $ gen_func(n) = \x\(x%n)
passert:: gen_func:2:5 ?= 1                    $ gen_func(n) = \x,n:n\(x%n)
passert:: inlist[1,2,3] ?= [1,2,3],            $ inlist(l) = l,

# String Tests:
passert:: "hello, "+"world" ?= "hello, world"
passert:: "Answer: "+1 ?= "Answer: 1"
passert:: "hello"*2 ?= "hellohello"
passert:: "01234":2 ?= "2"
passert:: "01234":1:3 ?= "12"
passert:: a"b" ?= "ab"                         $ a(x) = "a"+x

# Class Tests:
passert:: { x = 1 } ?= { x = 1 }
passert:: { x = 1 } != { x = 2 }
passert:: { y = 2 ;; x = 1 }.y ?= 2
passert:: a.x ?= 1                             $ a = { x = 1 }
passert:: a.x ?= 1                             $ a := { x = 1 }
passert:: a.f(2) ?= a.f:2 ?= 3                 $ a = { f(x) = x+1 }
passert:: a:"x+1" ?= 2                         $ a = { x = 1 }
passert:: b ?= { z = 5 }                       $ b = a + {z=5} $ a = {}
passert:: { x = 1 } + { z = 5 } ?= { x = 1 ;; z = 5 }

# Instance Tests:
nothing := {
 __type__(self) = "nil"
 __init__(self) = self
 __get__(self, key) = key
 __call__(self, args) = args
 __cont__(self) = []
 __add__(self, other) = other
 __sub__(self, other) = -other
 __mul__(self, other) = 0
 __div__(self, other) = 0
 __mod__(self, other) = 0
 __pow__(self, other) = 0
 __rdiv__(self, other) = other/0
 __rmod__(self, other) = other%0
 __rpow__(self, other) = 1
 __num__(self) = 0
 __abs__(self) = 0
 __cmp__(self, other) = other
 __eq__(self, other) = (!other)
 __ne__(self, other) = (?other)
 __gt__(self, other) = other < 0
 __lt__(self, other) = other > 0
 __ge__(self, other) = other <= 0
 __le__(self, other) = other >= 0
 __str__(self) = "nil"
 __repr__(self) = `\nil`
 __len__(self) = 0
 __bool__(self) = 0
 __rep__(self, other) = [self]**other
 __rrep__(self, other) = ()
 }
nil := nothing()
passert:: type(nil) ?= "nil"
passert:: nil.thing ?= "thing"
passert:: nil(1,2) ?= 1,2
passert:: cont(nil) ?= []
passert:: nil+1 ?= 1 ?= 1+nil
passert:: nil-1 ?= -1 ?= -(1-nil)
passert:: nil*1 ?= 0 ?= 1*nil
passert:: nil/1 ?= 0
passert:: ((:(1/nil)):1).name ?= "ZeroDivisionError"
passert:: nil%1 ?= 0
passert:: ((:(1%nil)):1).name ?= "ZeroDivisionError"
passert:: nil^1 ?= 0
passert:: 1^nil ?= 1
passert:: nil ?= 0 ?= nil
passert:: nil != 1 != nil
passert:: nil > -1 < nil
passert:: nil < 1 > nil
passert:: nil >= -.5 <= nil
passert:: nil <= .5 >= nil
passert:: num(nil) ?= 0
passert:: abs(nil) ?= 0
passert:: str(nil) ?= "nil"
passert:: repr(nil) ?= `\nil`
passert:: len(nil) ?= 0
passert:: (?nil) ?= 0
passert:: nil**2 ?= [nil,nil]
passert:: 2**nil ?= ()
passert:: {} ++ { x = 1 } ?= { x = 1 }
passert:: type({}() ++ { x = 1 }) ?= "instance"
passert:: { nothing := nothing ;; nil := nil } ?= { nil := nil ;; nothing := nothing }

# Multi-Line Tests:
passert:: # A mid-line comment
 1 ?= 1
passert:: f(-2) ?= 1/2
 $ f(x) =
  x+1 @ x>0;
  -1/x
passert:: a.f(1) ?= 1
 $ a = {
  f(x) = x
  x = 1
  }

# With Clause Tests:
passert:: f(1.5) ?= 5        $ f(x) = (gx*floor(gx) $ gx = g(x)) $ g(x) = x+1
passert:: f(1.5) ?= 5        $ f(x) = { g(x) = x+1 ;; gx = g(x) } : "gx*floor(gx)"
passert:: g(4) ?= 6          $ g(x) = (m(z) $ z = x^2 $ m(z) = z%10)
passert:: g(4) ?= 6          $ g(x) = { m(z) = z%10 ;; z = x^2 } : "m(z)"

# Loop Tests:
passert:: 1,2,3~ \x\x ?= 1,2,3
passert:: 1,2,3,4~~ \(x,y)\(x+y) ?= 3,7
passert:: 10,20~ 1,2~ \(x,y)\(x+y) ?= (11,12),(21,22)

# Multi-Set Tests:
passert:: a,b ?= 1,2                      $ a,b = 1,2
passert:: a ?= 1 & b ?= 2                 $ a,b = 1,2
passert:: a ?= 1 & b ?= 2,3               $ a,b = 1,2,3
passert:: a ?= 1 & ! b                    $ a,b = 1
passert:: smoosh((1,2),(3,4)) ?= 1,2,3,4
 $ smoosh(a) = (
  x ++ smoosh(xs) @ xs;
  x
  $ x,xs = a
  )

# Miscellaneous Tests:
passert:: f..g(2) ?= 9                       $ f(x) = x^2 $ g(x) = x+1
passert:: applyplus(0,-2) ?= 1,-1            $ applyplus(__) = __~\x\(x+1)
passert:: (x $ x = 1) ?= 1

# Expression Tests:
passert:: (1,2,3) ?= 1,2,3~ \x\x
passert:: \x\(x+1) ?= \x\x+1
passert:: (1,2,3,4) ?= 1,2 ++ 3,4
passert:: (2,) ?= 1,2 -- 1
passert:: (1,2,1,2) ?= 1,2 ** 2
passert:: (1,2,3,4) ?= 1,2,3,4
passert:: 0 ?= 1+2-3
passert:: 0 ?= 6 % 3
passert:: 2.4 ?= 3*4/5

# Complex Tests:
passert:: mod:3:2 ?= 1
 $ mod(x,y) = (xy+-1*floor:(xy))*y $ xy = x/y
passert:: slope:(\x\x):1:2 ?= 1
 $ slope(f, a,b) = (f:b+-f:a)/(b+-a)
passert:: parts:(1,2,3,4) ?= 1,(2,3,4)
 $ parts(l) = (
  a,as
  $ a,as = l
 )
passert:: max(1,0,9,6,8,3) ?= 9
 $ max(l) = (
  (
   a @ a > maxtail;
   maxtail
   $ maxtail = max:as
   ) @ len:as;
  a
  $ a,as = l
 )
passert:: zip:(1,2):(10,20) ?= (1,10),(2,20)
 $ zip(la, lb) =
  (
   (a,b), ++ zip:as:bs
   $ a,as = la
   $ b,bs = lb
   )
  @ len:la & len:lb
passert:: qsort(9,0,6,3,8) ?= 0,3,6,8,9
 $ qsort(l) = (
   qsort:(as~\x\(x@x<=a)) ++ a ++ qsort:(as~\x\(x@x>a))
   $ a,as = l
   ) @ len:l
passert:: qsort(9,0,6,3,8) ?= 0,3,6,8,9
 $ qsort(l) = (
   qsort:(as~\x\(x@x<=a)) ++ a ++ qsort:(as~\x\(x@x>a))
   $ a,as = l
   ) @ l,
passert:: range(1,16) ~ crackle pop ?= (1,2,"Crackle",4,"Pop","Crackle",7,8,"Crackle","Pop",11,"Crackle",13,14,"CracklePop")
 $ crackle pop (x) = (
    "CracklePop"
        @ div by three & div by five;
    "Crackle"
        @ div by three;
    "Pop"
        @ div by five;
    x
    $ div by three = x%3 ?= 0
    $ div by five = x%5 ?= 0
 )
passert:: crackle pop (10) ?= (1,2,"Crackle",4,"Pop","Crackle",7,8,"Crackle","Pop")
 $ crackle pop (end, -x:1, -mod three:1, -mod five:1) =
  (
   "CracklePop"
     @ mod three ?= 0 & mod five ?= 0;
   "Crackle"
     @ mod three ?= 0;
   "Pop"
     @ mod five ?= 0;
   x
   ),
  ++
  ( crackle pop (end, x+1, (mod three+1) % 3, (mod five+1) % 5)
    @ x < end
    )
passert:: sum( 2**20~~ \(x,y)\(x!=y) ) ?= 0
passert:: z ?= 3
 $ (
  if (x < 1) ::
   z = 3
  )
 $ x = 0
 $ if (cond) = proc @ cond
passert:: abs'(2) ?= 2 & abs'(0) ?= 0 & abs'(-2) ?= 2
 $ abs'(x) = if (x<0) (\-x) elif (x?0) (\0) else (x)
 $ if(cond, expr) =
    [1, expr()]@cond; [0]
 $ elif(cond, expr, parts) = (
    [1, out]@done; [1, expr()]@cond; [0]
    $ done, out = list:parts
    )
 $ else(expr, parts) = (
    out@done;expr()
    $ done, out = list:parts
    )
passert:: (( try:: 1/0 ):1).name ?= "ZeroDivisionError"
 $ try(expr) = :expr()

# Built-Ins Tests:
passert:: a != b                    $ (def :: b.x = 2) $ b := copy(a) $ a := { x = 1 }
passert:: type:(1,2,3) ?= "list"
passert:: num"1" ?= 1
passert:: (to:"num"):"1" ?= 1
passert:: str:"a" ?= "a"
passert:: repr:"a" ?= "\'a\'"
passert:: calc:"1" ?= 1
passert:: fold:\(x,y)\(x+y):(1,2,3) ?= 6
passert:: (D:\x\x):0 ?= 1
passert:: 1.999 < (S:\x\x):0:2 < 2.001
passert:: row(1,2,3) ?= [1,2,3]
passert:: list[1,2,3] ?= 1,2,3
passert:: matrix:[1,2]:[3,4]+1 ?= matrix:[2,3]:[4,5]
passert:: cont:"abc" ?= "a","b","c"
passert:: det:(matrix:[1,2]:[3,4]) ?= -2
passert:: sum(2,2,3) ?= 7
passert:: prod(2,2,3) ?= 12
passert:: join:",":[1,2] ?= "1,2"
passert:: connect:[1,2]:[3,4] ?= matrix:[1,2]:[3,4]
passert:: merge:(1,(2,2)):(3,4) ?= 1,2,2,3,4
passert:: sort(1,0,9,5) ?= 0,1,5,9
passert:: rev(1,2,3) ?= 3,2,1
passert:: round(1.5) ?= 2
passert:: eval:\1 ?= 1
passert:: find:"a":(0,1,"a",3,4) ?= 2
passert:: split:"abcde":"c" ?= "ab","de"
passert:: replace:"abc":"b":"" ?= "ac"
passert:: in:(0,1,2,3):2
passert:: range(1,6,2) ?= 1,3,5
passert:: len:(0,0,(0,0)) ?= 3
passert:: size:(0,(0,0),0) ?= 4
passert:: abs([3,4]) ?= 5
passert:: cont:(data:(1,2,3)) ?= 1,2,3
passert:: frac:1:2 ?= 0.5
passert:: simp:2:4 ?= frac:1:2
passert:: 2 <= 2d6: <= 12
passert:: floor:1.5 ?= ceil:0.5 ?= 1
passert:: log(100) ?= 2
passert:: ln(e) ?= 1
passert:: sqrt(2) ?= 2^0.5
passert:: sqrt(-1) ?= i
passert:: tan(0) ?= 0
passert:: 0 <= sin(pi) <= 10^-15
passert:: cos(0) ?= 1
passert:: atan(0) ?= 0
passert:: asin(0) ?= 0
passert:: acos(1) ?= 0
passert:: deg:(rad:180) ?= 180
passert:: fact:3 ?= 6
passert:: gcd:8:6 ?= 2
passert:: lcm:4:6 ?= 12
passert:: perm:5:2 ?= 20
passert:: comb:4:2 ?= 6
passert:: env().a ?= a ?= 2         $ a = 2
passert:: iserr(error())
passert:: iserr((:raise()):1)
passert:: from(error, error())
passert:: from(error, (:raise()):1)
passert:: var:"a" ?= "b"            $ a = b
passert:: a ?= 5                    $ proc("a = 5")
passert:: num(i) ?= i
passert:: real(i) ?= 0
passert:: imag(i) ?= 1
passert:: except( :(1/0), "ZeroDivisionError" ):1
passert:: except( :(1/0), (:(1/0)):1 ):1
passert:: int(1.5) ?= 1
passert:: class({}()) ?= {}
passert:: type(class({}())) ?= "class"
passert:: succ1 ?= 2
passert:: is:"a":"a" & is(5,5,5)
passert:: 0 ?= ¬1
passert:: 0.5 ?= ½
passert:: " " ?= ␠
passert:: 5E6 ?= 5 000 000
passert:: 2 is 2

# New Feature Tests:
passert:: f..g(1)g..f(2) ?= 20      $ f(x) = x^2 $ g(x) = x+1
passert:: f() ?= 5, & f(1) ?= 1,    $ f(*l:(5,)) = l
passert:: a ?= 1 & b ?= [2,3]       $ a,b = [1,2,3]
passert:: a ?= "a" & b ?= "bc"      $ a,b = "abc"
passert:: "∑" ?= "\u2211"
passert:: π ?= pi
passert:: "\'\\'\\n#" ?= `"\'\n#`
passert:: (:(1)):0 ?= 1
passert:: {x=1}~\x\x ?= "x",
passert:: {x=1 ;; y=2} ?= {
   x = 1
  
   y =
    2
 }
passert:: {x=1 ;; y=2} > {x=1}
passert:: ! {x=1 ;; y=2} > {z=1}
passert:: {x=1} >= {x=1}
passert:: {x=1} <= {x=1}
passert:: iserr((:raise()):1)
passert:: :except( :(1/0) ) ?= :(1/0)
passert:: (:raise( ComplicatedError() )):1 ?= ComplicatedError()
    $ ComplicatedError := error + {
                                   name := "ComplicatedError"
                                   message := "A complicated error occurred"
                                   metadata := {
                                     top := true
                                     }
                                   }
passert:: ∛:27 ?= 3 ?= (\x\x^(1/3)):27
passert:: ∜:16 ?= 2 ?= (\x\sqrt(sqrt(x))):16
passert:: 3 ?= ((\x\x)+1):2
passert:: 3 ?= (1+\x\x):2
passert:: 4 ?= ((\x\x)*2):2
passert:: 4 ?= (2*\x\x):2
passert:: 8 ?= ((\x\x)^3):2
passert:: 9 ?= (3^\x\x):2
passert:: (\y\x+y):2 ?= 5       $ x = 3
passert:: (\x:5\x*y)() ?= 10    $ y = 2 $ x = 2
passert:: ((:(1:1)):1).name ?= "ArgumentError"
passert:: iserr:{__error__ = true}()
passert:: [_, _] ?= [1, 2]
passert:: (_, _) != (1, 2, 3)
passert:: _ + _ ?= _
passert:: ((\x,y\x+y):1):2 ?= 3
passert:: (\x,y\x+y):1:2 ?= 3
passert:: (\x,y\x+y)(1)(2) ?= 3
passert:: (\x,-y:1\x+y):2 ?= 3
passert:: _ <> 1
passert:: { x = 1 } ++ { y = 2 } ?= { x = 1 ;; y = 2 }
passert:: ((:({ x = 1 ;; x = 2 })):1).name ?= "RedefinitionError"
passert:: "All
 done!" ?= "All" ++ "\n " ++ "done!"
passert:: "All done!" ?= "All "
        "done!"
passert:: "\\n1" ?= "\\n"+1
passert:: {} ?= {{ x := 42 ;; y := "42" }}
passert:: () ?= f:              $ f() = ()
passert:: 7625597484987 ?= 3^^3
passert:: ((:({}()+1)):1).name ?= "TypeError"
passert:: ((:({}()>1)):1).name ?= "TypeError"
passert:: { x = 1 } ?= { x := 1 }
passert:: {} ?= { x := 1 } -- { x = 1 }
passert:: { x = 1 } ?= { x = 1 } -- { x = 2 }
passert:: "abcd" -- "bc" ?= "ad"
passert:: (data:(data:(1,2,3)):(data:(5,6,7))):2 ?= 6
passert:: [6] ?= [1, "a", 5, 6] -- 5 -- "a" -- 1
passert:: {} ?= a               $ a + { x = 1 } $ a := {}
passert:: 1 ?= a                $ ( a = 1 )
passert:: f(5) ?= f(5)          $ f(x) = x+1
passert:: "a"**3 ?= "a","a","a"
passert:: 6 ?= 5\x\x+1
passert:: 2π ?= 2*pi
passert:: is("abc", `abc`)
passert:: ( del::x )    $ x = 1
passert:: x() ? y ? 1   $ x = y = 1
passert:: 9 ?= 2f3      $ f(a,b) = a^b
passert:: 5mod3 ?= 2    $ mod(base,x) = x%base
passert:: x             $ 1 ?= (x=1 ;; x)
passert:: x ?= "don't touch me"
passert:: { global:: (def:: x = 3) ;; x = 2 }.x ?= 2 & x ?= 3
passert:: (:: 1 :: 2) ?= " 1 :: 2"
passert:: "'"*0 ?= ""
passert:: [1]++[1] ?= [1]**2
passert:: 10 != 1
passert:: type({}) ?= "class"
passert:: 270394572394085723904572394857203495793457 ?= 270394572394085723904572394857203495793457.0
passert:: 5 in [1,5,2]
passert:: ({x=1}()) from {x=1}
passert:: 5 bitor 3 ?= 7
passert:: 6 bitand 5 ?= 4
passert:: 3 bitxor 7 ?= 4
passert:: 5 rshift 1 ?= 2
passert:: 7 lshift 1 ?= 14

# Final Testing:
passert:: save("Tests.save.txt");true
passert:: contents ?= read("Tests.save.txt")      $ write("Tests.save.txt", contents) $ contents = read("Tests.save.txt")
passert:: { run :: Tests.save.txt }
passert:: paren(parens()-1) ?= "123"              $ (123)
passert:: "Make sure you get two messages after this:" ?= print("Make", "sure", "you", "get", "two", "messages", "after", "this:")
passert:: printdone() ?= printdone()              $ printdone() = print("    Message sent.")
